#pragma warning disable 1591
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Chords.Android.Views
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 2 "FindChordView.cshtml"
using System.Text.RegularExpressions;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class FindChordView : PortableRazor.ViewBase
{

#line hidden

#line 3 "FindChordView.cshtml"
public Chords.Android.Models.FindChordModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE html>\n<html>\n<head>\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"style.css\"");

WriteLiteral(" />\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"bootstrap.min.css\"");

WriteLiteral(" />\n\t<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"bootstrap-toggle.min.css\"");

WriteLiteral(" />\n</head>\n<body>\n    <nav");

WriteLiteral(" class=\"navbar navbar-inverse navbar-fixed-top\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\n            <div");

WriteLiteral(" class=\"navbar-header\"");

WriteLiteral(">\n                <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"navbar-toggle\"");

WriteLiteral(" data-toggle=\"collapse\"");

WriteLiteral(" data-target=\".navbar-collapse\"");

WriteLiteral(">\n                    <span");

WriteLiteral(" class=\"sr-only\"");

WriteLiteral(">Toggle navigation</span>\n                    <span");

WriteLiteral(" class=\"icon-bar\"");

WriteLiteral("></span>\n                    <span");

WriteLiteral(" class=\"icon-bar\"");

WriteLiteral("></span>\n                    <span");

WriteLiteral(" class=\"icon-bar\"");

WriteLiteral("></span>\n                </button>\n                <span");

WriteLiteral(" class=\"navbar-brand\"");

WriteLiteral(">Guitar Chords</span>\n            </div>\n                \n            <div");

WriteLiteral(" class=\"navbar-collapse collapse\"");

WriteLiteral(">\n                <ul");

WriteLiteral(" class=\"nav navbar-nav\"");

WriteLiteral(">\n                    <li><a");

WriteLiteral(" href=\"hybrid:ShowChord\"");

WriteLiteral(">Show chord</a></li>\n                    <li><a");

WriteLiteral(" href=\"hybrid:FindChord\"");

WriteLiteral(">Find chord</a></li>\n                </ul>\n            </div>\n        </div>\n    " +
"</nav>\n    <script");

WriteLiteral(" src=\"jquery.min.js\"");

WriteLiteral("></script>\n    <script");

WriteLiteral(" src=\"bootstrap.min.js\"");

WriteLiteral("></script>\n\t<script");

WriteLiteral(" src=\"bootstrap-toggle.min.js\"");

WriteLiteral("></script>\n    <div");

WriteLiteral(" class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\"");

WriteLiteral(">\n\n\t\t<!-- Main content start -->\n\t\t<form");

WriteLiteral(" action=\"hybrid:FindChord\"");

WriteLiteral(">\n\t\t\t<div");

WriteLiteral(" style=\"margin-top:20px;\"");

WriteLiteral(">\n\t\t        <select");

WriteLiteral(" name=\"conv\"");

WriteLiteral(" title=\"Naming convention\"");

WriteLiteral(" style=\"width:100%; display:none;\"");

WriteLiteral(" onchange=\"updateNamingConvention(this.value);\"");

WriteLiteral(">\n");


#line 41 "FindChordView.cshtml"
		        

#line default
#line hidden

#line 41 "FindChordView.cshtml"
                 foreach(var conv in Model.NamingConventions)
		        {
		            if (Model.conv == conv)
		            {


#line default
#line hidden
WriteLiteral("\t\t                <option");

WriteAttribute ("value", " value=\"", "\""

#line 45 "FindChordView.cshtml"
, Tuple.Create<string,object,bool> ("", conv

#line default
#line hidden
, false)
);
WriteLiteral(" selected>");


#line 45 "FindChordView.cshtml"
                                                  Write(conv);


#line default
#line hidden
WriteLiteral("</option>\n");


#line 46 "FindChordView.cshtml"
		            }
		            else
		            {


#line default
#line hidden
WriteLiteral("\t\t                <option");

WriteAttribute ("value", " value=\"", "\""

#line 49 "FindChordView.cshtml"
, Tuple.Create<string,object,bool> ("", conv

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 49 "FindChordView.cshtml"
                                         Write(conv);


#line default
#line hidden
WriteLiteral("</option>\n");


#line 50 "FindChordView.cshtml"
		            }
		        }


#line default
#line hidden
WriteLiteral("\t\t        </select>\n            </div>\n\t\t\t<div");

WriteLiteral(" style=\"margin-top:20px;\"");

WriteLiteral(">\n");


#line 55 "FindChordView.cshtml"
			

#line default
#line hidden

#line 55 "FindChordView.cshtml"
             for(var i = 0; i < Model.AllNotes[Model.conv].Length; i++)
			{


#line default
#line hidden
WriteLiteral("\t\t\t\t<input");

WriteLiteral(" type=\"checkbox\"");

WriteLiteral(" name=\"note\"");

WriteAttribute ("value", " value=\"", "\""

#line 57 "FindChordView.cshtml"
                    , Tuple.Create<string,object,bool> ("", Regex.Replace(Model.AllNotes[Model.conv][i].ToString(), "<.*?>", String.Empty)

#line default
#line hidden
, false)
);
WriteLiteral(" data-toggle=\"toggle\"");

WriteLiteral(" data-on=\"");


#line 57 "FindChordView.cshtml"
                                                                                                                                                                       Write(Model.AllNotes[Model.conv][i]);


#line default
#line hidden
WriteLiteral("\"");

WriteLiteral(" data-off=\"");


#line 57 "FindChordView.cshtml"
                                                                                                                                                                                                                   Write(Model.AllNotes[Model.conv][i]);


#line default
#line hidden
WriteLiteral("\"");

WriteLiteral(" data-width=\"100px;\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(" />\n");


#line 58 "FindChordView.cshtml"
				if (i % 5 == 4)
				{


#line default
#line hidden
WriteLiteral("\t\t\t\t    <br />\n");


#line 61 "FindChordView.cshtml"
				}
			}


#line default
#line hidden
WriteLiteral("            </div>\n\t\t\t<div");

WriteLiteral(" style=\"margin-top:20px;\"");

WriteLiteral(">\n\t\t\t    <input");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" style=\"width:100%;\"");

WriteLiteral(" value=\"Find\"");

WriteLiteral(" style=\"display:none;\"");

WriteLiteral(" />\n\t\t\t</div>\n\t\t</form>\n        <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(@">				
            function updateNamingConvention(value) {
                location = 'hybrid:FindChord?conv=' + value;
            }
			$(document).ready(function(){
				$(""input,select"").show();
			});
        </script>
		<!-- Main content end -->
            
    </div>
    <hr />
    <footer>
        <p>&copy; 2017 - Tomáš Němec</p>
    </footer>
</body>
</html>
");

}
}
}
#pragma warning restore 1591
