#pragma warning disable 1591
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Chords.Android.Views
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "ShowChordResultView.cshtml"
using PortableRazor.Web.Mvc;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class ShowChordResultView : PortableRazor.ViewBase
{

#line hidden

#line 3 "ShowChordResultView.cshtml"
public Chords.Android.Models.ShowChordResultModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{

#line 4 "ShowChordResultView.cshtml"
  
    var symbol = Model?.ChordDecorator?.Symbols[0];
    var otherSymbols = Model.ChordDecorator != null ? Model.ChordDecorator.Symbols.Skip(1) : new string[0];
    var allRoots = Model.AllRoots != null ? string.Join(",", Model.AllRoots.Select(i => i.ToString())) : string.Empty;
    var allChordTypes = Model.AllChordTypes != null ? string.Join(",", Model.AllChordTypes) : string.Empty;


#line default
#line hidden
WriteLiteral("\n<!DOCTYPE html>\n<html>\n<head>\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"style.css\"");

WriteLiteral(" />\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"bootstrap.min.css\"");

WriteLiteral(" />\n</head>\n<body>\n    <nav");

WriteLiteral(" class=\"navbar navbar-inverse\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\n            <div");

WriteLiteral(" class=\"navbar-header\"");

WriteLiteral(">\n                <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"navbar-toggle\"");

WriteLiteral(" data-toggle=\"collapse\"");

WriteLiteral(" data-target=\".navbar-collapse\"");

WriteLiteral(">\n                    <span");

WriteLiteral(" class=\"sr-only\"");

WriteLiteral(">Toggle navigation</span>\n                    <span");

WriteLiteral(" class=\"icon-bar\"");

WriteLiteral("></span>\n                    <span");

WriteLiteral(" class=\"icon-bar\"");

WriteLiteral("></span>\n                    <span");

WriteLiteral(" class=\"icon-bar\"");

WriteLiteral("></span>\n                </button>\n                <span");

WriteLiteral(" class=\"navbar-brand\"");

WriteLiteral(">Show chord chart</span>\n            </div>\n                \n            <div");

WriteLiteral(" class=\"navbar-collapse collapse\"");

WriteLiteral(">\n                <ul");

WriteLiteral(" class=\"nav navbar-nav\"");

WriteLiteral(">\n                    <li><a");

WriteLiteral(" href=\"hybrid:ShowChord\"");

WriteLiteral(">Show chord chart</a></li>\n                    <li><a");

WriteLiteral(" href=\"hybrid:FindChord\"");

WriteLiteral(">Find chord name</a></li>\n                    <li><a");

WriteLiteral(" href=\"hybrid:FavoriteChords\"");

WriteLiteral(">Favourite chords</a></li>\n                    <li><a");

WriteLiteral(" href=\"hybrid:Circle\"");

WriteLiteral(">Circle of fifths</a></li>\n                    <li><a");

WriteLiteral(" href=\"hybrid:Settings\"");

WriteLiteral(">Settings</a></li>\n                </ul>\n            </div>\n        </div>\n    </" +
"nav>\n    <script");

WriteLiteral(" src=\"jquery.min.js\"");

WriteLiteral("></script>\n    <script");

WriteLiteral(" src=\"bootstrap.min.js\"");

WriteLiteral("></script>\n    <div");

WriteLiteral(" class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 main-content\"");

WriteLiteral(">\n\n\t\t<!-- Main content start -->\n");


#line 45 "ShowChordResultView.cshtml"
		

#line default
#line hidden

#line 45 "ShowChordResultView.cshtml"
         if (Model.AllRoots!= null && Model.AllRoots.Length > 1)
		{			
			

#line default
#line hidden

#line 47 "ShowChordResultView.cshtml"
        Write(new HtmlString("<h4 class=\"other-chords\">Chords found:\n"));


#line default
#line hidden

#line 47 "ShowChordResultView.cshtml"
                                                                           
			for(var i = 0; i < Model.AllRoots.Length; i++)
			{


#line default
#line hidden
WriteLiteral("                <a");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", "hybrid:ShowChord?root=", true)

#line 50 "ShowChordResultView.cshtml"
         , Tuple.Create<string,object,bool> ("", Model.AllRoots[i]

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "&type=", true)

#line 50 "ShowChordResultView.cshtml"
                                   , Tuple.Create<string,object,bool> ("", Model.AllChordTypes[i]

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "&roots=", true)

#line 50 "ShowChordResultView.cshtml"
                                                                   , Tuple.Create<string,object,bool> ("", allRoots

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "&types=", true)

#line 50 "ShowChordResultView.cshtml"
                                                                                     , Tuple.Create<string,object,bool> ("", allChordTypes

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "&partial=", true)

#line 50 "ShowChordResultView.cshtml"
                                                                                                              , Tuple.Create<string,object,bool> ("", Model.AllowPartial

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "&special=", true)

#line 50 "ShowChordResultView.cshtml"
                                                                                                                                            , Tuple.Create<string,object,bool> ("", Model.AllowSpecial

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "&conv=", true)

#line 50 "ShowChordResultView.cshtml"
                                                                                                                                                                       , Tuple.Create<string,object,bool> ("", Model.conv

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 50 "ShowChordResultView.cshtml"
                                                                                                                                                                                                                        Write(Model.AllRoots[i].ToString(Model.conv));


#line default
#line hidden

#line 50 "ShowChordResultView.cshtml"
                                                                                                                                                                                                                                                                 Write(Model.AllChordTypes[i]);


#line default
#line hidden
WriteLiteral("</a>\n");


#line 51 "ShowChordResultView.cshtml"
			}
            

#line default
#line hidden

#line 52 "ShowChordResultView.cshtml"
        Write(new HtmlString("\n</h4>\n"));


#line default
#line hidden

#line 52 "ShowChordResultView.cshtml"
                                          
		}


#line default
#line hidden
WriteLiteral("        ");


#line 54 "ShowChordResultView.cshtml"
         if (Model.ChordDecorator != null)
		{


#line default
#line hidden
WriteLiteral("\t\t    <h2>");


#line 56 "ShowChordResultView.cshtml"
           Write(symbol);


#line default
#line hidden
WriteLiteral("</h2>\n");


#line 57 "ShowChordResultView.cshtml"

			if (otherSymbols.Any())
			{


#line default
#line hidden
WriteLiteral("\t\t\t    <h4>Other symbols:</h4>\n");


#line 61 "ShowChordResultView.cshtml"
			    foreach(var otherSymbol in otherSymbols)
			    {


#line default
#line hidden
WriteLiteral("\t\t\t        <span>");


#line 63 "ShowChordResultView.cshtml"
                     Write(otherSymbol);


#line default
#line hidden
WriteLiteral("</span>\n");


#line 64 "ShowChordResultView.cshtml"
			    }
			}


#line default
#line hidden
WriteLiteral("\t\t\t<h4>Chord intervals:</h4>\n");

WriteLiteral("\t\t\t<p>\n");


#line 68 "ShowChordResultView.cshtml"
			

#line default
#line hidden

#line 68 "ShowChordResultView.cshtml"
             foreach(var interval in Model.ChordDecorator.Intervals)
			{


#line default
#line hidden
WriteLiteral("\t\t\t    <span>");


#line 70 "ShowChordResultView.cshtml"
                 Write(interval);


#line default
#line hidden
WriteLiteral("</span>\n");


#line 71 "ShowChordResultView.cshtml"
			}


#line default
#line hidden
WriteLiteral("\t\t\t</p>\n");


#line 73 "ShowChordResultView.cshtml"



#line default
#line hidden
WriteLiteral("\t\t\t<h4>Chord notes:</h4>\n");

WriteLiteral("\t\t\t<p>\n");


#line 76 "ShowChordResultView.cshtml"
			

#line default
#line hidden

#line 76 "ShowChordResultView.cshtml"
             foreach(var note in Model.ChordDecorator.Notes)
			{


#line default
#line hidden
WriteLiteral("\t\t\t    <span>");


#line 78 "ShowChordResultView.cshtml"
                 Write(note);


#line default
#line hidden
WriteLiteral("</span>\n");


#line 79 "ShowChordResultView.cshtml"
			}


#line default
#line hidden
WriteLiteral("\t\t\t</p>\n");


#line 81 "ShowChordResultView.cshtml"
		}


#line default
#line hidden
WriteLiteral("\t\t<div");

WriteLiteral(" id=\"error\"");

WriteLiteral(" class=\"error\"");

WriteLiteral(">");


#line 82 "ShowChordResultView.cshtml"
                                 Write(Model.Error);


#line default
#line hidden
WriteLiteral("</div>\n");


#line 83 "ShowChordResultView.cshtml"
        

#line default
#line hidden

#line 83 "ShowChordResultView.cshtml"
         if (string.IsNullOrEmpty(Model.Error))
		{


#line default
#line hidden
WriteLiteral("\t\t\t<div");

WriteLiteral(" id=\"loader\"");

WriteLiteral("></div>\n");

WriteLiteral("\t\t\t<script>\n\t\t\t\t$(document).ready(function (){\n\t                $.ajax({\n\t       " +
"             url: \'hybrid:ShowChordLayouts\',\n\t                    type: \'get\',\n\t" +
"                    data: {\n\t                        root: \'");


#line 92 "ShowChordResultView.cshtml"
                              Write(Model.Root);


#line default
#line hidden
WriteLiteral("\',\n\t                        type: \'");


#line 93 "ShowChordResultView.cshtml"
                              Write(Model.ChordType);


#line default
#line hidden
WriteLiteral("\',\n                            roots: \'");


#line 94 "ShowChordResultView.cshtml"
                               Write(allRoots);


#line default
#line hidden
WriteLiteral("\',\n                            types: \'");


#line 95 "ShowChordResultView.cshtml"
                               Write(allChordTypes);


#line default
#line hidden
WriteLiteral("\',\n\t                        partial: \'");


#line 96 "ShowChordResultView.cshtml"
                                 Write(Model.AllowPartial);


#line default
#line hidden
WriteLiteral("\',\n\t                        special: \'");


#line 97 "ShowChordResultView.cshtml"
                                 Write(Model.AllowSpecial);


#line default
#line hidden
WriteLiteral("\',\n\t                        conv: \'");


#line 98 "ShowChordResultView.cshtml"
                              Write(Model.conv);


#line default
#line hidden
WriteLiteral("\'\n\t                    }\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t</script>\n");


#line 103 "ShowChordResultView.cshtml"
		}


#line default
#line hidden
WriteLiteral("        <!-- Main content end -->\t\n\n    </div>\n    <hr />\n    <footer>\n        <p" +
">&copy; 2017 - Tomáš Němec</p>\n    </footer>\n</body>\n</html>\n");

}
}
}
#pragma warning restore 1591
