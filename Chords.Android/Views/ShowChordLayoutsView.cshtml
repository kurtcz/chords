@using PortableRazor.Web.Mvc
@using Chords.Core.Extensions
@inherits PortableRazor.ViewBase
@model Chords.Android.Models.ShowChordLayoutsModel
@{
    var otherSymbols = Model.ChordDecorator != null ? Model.ChordDecorator.Symbols.Skip(1) : new string[0];
    var allRoots = Model.Parameters["roots"]?.Split(',');
    var allChordTypes = Model.Parameters["types"]?.Split(',');
}
<!DOCTYPE html>
<html>
<head>
	<!--link rel="stylesheet" href="jquery.mobile-1.4.5.min.css" /-->
    <link rel="stylesheet" href="style.css" />
    <link rel="stylesheet" href="bootstrap.min.css" />
</head>
<body>
    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <span class="navbar-brand">Show chord chart</span>
            </div>
                
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li><a href="hybrid:ShowChord?conv=@Model.Parameters["conv"]">Show chord chart</a></li>
                    <li><a href="hybrid:FindChord?conv=@Model.Parameters["conv"]">Find chord name</a></li>
					<li><a href="hybrid:Circle?conv=@Model.Parameters["conv"]">Circle of fifths</a></li>
					<li><a href="hybrid:FavoriteChords?conv=@Model.Parameters["conv"]">Favourite chords</a></li>
                </ul>
            </div>
        </div>
    </nav>
    <script src="jquery.min.js"></script>
	<script src="jquery.mobile-1.4.5.min.js"></script>
    <script src="bootstrap.min.js"></script>
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 main-content">

        <!-- Main content start -->
        @if (allRoots!= null && allRoots.Length > 1)
        {
            @(new HtmlString("<h4 class=\"other-chords\">Chords found:\n"))
            for(var i = 0; i < allRoots.Length; i++)
            {
                <a href="hybrid:ShowChord?root=@(allRoots[i])&type=@(allChordTypes[i])&roots=@(Model.Parameters["roots"])&types=@(Model.Parameters["types"])&partial=@(Model.Parameters["partial"])&special=@(Model.Parameters["special"])&conv=@(Model.Parameters["conv"])">@(allRoots[i])@(allChordTypes[i])</a>
            }
            @(new HtmlString("\n</h4>\n"))
        }
		@if (Model.ChordDecorator != null)
	    {
	        <h2>@Model.ChordDecorator.Symbols[0]</h2>

	        if (otherSymbols.Any())
	        {
	            <h4>Other symbols:</h4>
	            foreach(var otherSymbol in otherSymbols)
	            {
	                <span>@otherSymbol</span>
	            }
	        }
	        <h4>Chord intervals:</h4>
	        <p>
	        @foreach(var interval in Model.ChordDecorator.Intervals)
	        {
	            <span>@interval</span>
	        }
	        </p>

	        <h4>Chord notes:</h4>
	        <p>
	        @foreach(var note in Model.ChordDecorator.Notes)
	        {
	            <span>@note</span>
	        }
	        </p>
	        <div id="error" class="error">@Model.Error</div>
	        <div id="loader"></div>
	        <div id="layouts" class="animate-bottom">
	        @if (Model.Layouts != null)
	        {
	            <h4>Chord layouts:</h4>
	            <p>
	                @Model.Layouts.Length results
	                @foreach(var layout in Model.Layouts)
	                {
					    var positions = string.Join(",", layout.IntPositions.Select(i => i.ToString()).ToArray());
					
	                    <div class="col-xs-6 col-sm-4 col-md-3 col-lg-2 chord-layout" data-favorite="@(layout.Favorite)" data-positions="@positions" onclick="playChord('@positions');">
	                        @(layout.Schema)
	                    </div>
	                }
	            </p>
	            <script type="text/javascript">
	                $('#loader').hide();
	                $('#layouts').show();
					function playChord(positions) {
	                    $.ajax({
	                        url: 'hybrid:PlayChord',
	                        type: 'get',
	                        data: {
	                            positions: positions
	                        }
	                    });
					}
					function setFavorite(selector, value) {
					    $(selector).attr('data-favorite', value);
					}
					$(function(){
					    $('.ui-loader').hide();
					    $.event.special.tap.tapholdThreshold = 300;
					    $.event.special.tap.emitTapOnTaphold = false;
					    $('.chord-layout').bind('taphold', function(){
                            var positions = $(this).attr('data-positions');
					        var favorite = $(this).attr('data-favorite') == "True";

					        $.ajax({
	                            url: favorite ? 'hybrid:RemoveFromFavorites' : 'hybrid:AddToFavorites',
	                            type: 'get',
	                            data: {
					                root: '@Model.ChordDecorator.Root',
					                type: '@Model.ChordDecorator.ChordType.ToDescription()',
					                conv: '@Model.Parameters["conv"]',
					                positions: positions
	                            }
	                        });
					    });
					});
            </script>
	        }
			</div>
		}
        <!-- Main content end -->   

    </div>
    <hr />
    <footer>
        <p>&copy; 2017 - Tomáš Němec</p>
    </footer>
</body>
</html>
