#pragma warning disable 1591
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Chords.Android.Views
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class ShowChordView : PortableRazor.ViewBase
{

#line hidden

#line 2 "ShowChordView.cshtml"
public Chords.Android.Models.ShowChordModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE html>\n<html>\n<head>\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"style.css\"");

WriteLiteral(" />\n\t<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"bootstrap.min.css\"");

WriteLiteral(" />\n</head>\n<body>\n    <nav");

WriteLiteral(" class=\"navbar navbar-inverse navbar-fixed-top\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\n            <div");

WriteLiteral(" class=\"navbar-header\"");

WriteLiteral(">\n                <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"navbar-toggle\"");

WriteLiteral(" data-toggle=\"collapse\"");

WriteLiteral(" data-target=\".navbar-collapse\"");

WriteLiteral(">\n                    <span");

WriteLiteral(" class=\"sr-only\"");

WriteLiteral(">Toggle navigation</span>\n                    <span");

WriteLiteral(" class=\"icon-bar\"");

WriteLiteral("></span>\n                    <span");

WriteLiteral(" class=\"icon-bar\"");

WriteLiteral("></span>\n                    <span");

WriteLiteral(" class=\"icon-bar\"");

WriteLiteral("></span>\n                </button>\n\t\t\t\t<span");

WriteLiteral(" class=\"navbar-brand\"");

WriteLiteral(">Guitar Chords</span>\n            </div>\n\t\t\t\t\n            <div");

WriteLiteral(" class=\"navbar-collapse collapse\"");

WriteLiteral(">\n                <ul");

WriteLiteral(" class=\"nav navbar-nav\"");

WriteLiteral(">\n                    <li><a");

WriteLiteral(" href=\"hybrid:ShowChord\"");

WriteLiteral(">Show chord</a></li>\n                    <li><a");

WriteLiteral(" href=\"hybrid:FindChord\"");

WriteLiteral(">Find chord</a></li>\n                </ul>\n            </div>\n        </div>\n    " +
"</nav>\n    <script");

WriteLiteral(" src=\"jquery.min.js\"");

WriteLiteral("></script>\n\t<script");

WriteLiteral(" src=\"bootstrap.min.js\"");

WriteLiteral("></script>\n    <div");

WriteLiteral(" class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\"");

WriteLiteral(">\n\n\t\t<!-- Main content start -->\n\t\t<form");

WriteLiteral(" action=\"hybrid:ShowChord\"");

WriteLiteral(">\n\t\t\t<select");

WriteLiteral(" name=\"root\"");

WriteLiteral(" title=\"Root\"");

WriteLiteral(">\n");


#line 37 "ShowChordView.cshtml"
			

#line default
#line hidden

#line 37 "ShowChordView.cshtml"
             foreach(var note in Model.Notes[Model.conv])
			{


#line default
#line hidden
WriteLiteral("                <option");

WriteAttribute ("value", " value=\"", "\""

#line 39 "ShowChordView.cshtml"
, Tuple.Create<string,object,bool> ("", note

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 39 "ShowChordView.cshtml"
                                 Write(note);


#line default
#line hidden
WriteLiteral("</option>\n");


#line 40 "ShowChordView.cshtml"
			}


#line default
#line hidden
WriteLiteral("\t\t\t</select>\n            <select");

WriteLiteral(" name=\"type\"");

WriteLiteral(" title=\"Chord type\"");

WriteLiteral(">\n");


#line 43 "ShowChordView.cshtml"
            

#line default
#line hidden

#line 43 "ShowChordView.cshtml"
             foreach(var kvp in Model.ChordTypeList)
            {


#line default
#line hidden
WriteLiteral("                <option");

WriteAttribute ("value", " value=\"", "\""

#line 45 "ShowChordView.cshtml"
, Tuple.Create<string,object,bool> ("", kvp.Value

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 45 "ShowChordView.cshtml"
                                      Write(kvp.Key);


#line default
#line hidden
WriteLiteral("</option>\n");


#line 46 "ShowChordView.cshtml"
            }


#line default
#line hidden
WriteLiteral("            </select>\n            <select");

WriteLiteral(" name=\"conv\"");

WriteLiteral(" title=\"Naming convention\"");

WriteLiteral(" onchange=\"updateNamingConvention(this.value);\"");

WriteLiteral(">\n");


#line 49 "ShowChordView.cshtml"
            

#line default
#line hidden

#line 49 "ShowChordView.cshtml"
             foreach(var conv in Model.NamingConventions)
            {
				if (Model.conv == conv)
				{


#line default
#line hidden
WriteLiteral("                    <option");

WriteAttribute ("value", " value=\"", "\""

#line 53 "ShowChordView.cshtml"
, Tuple.Create<string,object,bool> ("", conv

#line default
#line hidden
, false)
);
WriteLiteral(" selected>");


#line 53 "ShowChordView.cshtml"
                                              Write(conv);


#line default
#line hidden
WriteLiteral("</option>\n");


#line 54 "ShowChordView.cshtml"
				}
				else
				{


#line default
#line hidden
WriteLiteral("                    <option");

WriteAttribute ("value", " value=\"", "\""

#line 57 "ShowChordView.cshtml"
, Tuple.Create<string,object,bool> ("", conv

#line default
#line hidden
, false)
);
WriteLiteral(">");


#line 57 "ShowChordView.cshtml"
                                     Write(conv);


#line default
#line hidden
WriteLiteral("</option>\n");


#line 58 "ShowChordView.cshtml"
				}
            }


#line default
#line hidden
WriteLiteral("            </select>\n\t\t    <input");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" value=\"Find\"");

WriteLiteral(" />\n\t\t    <br />\n\t\t    <input");

WriteLiteral(" type=\"checkbox\"");

WriteLiteral(" name=\"partial\"");

WriteLiteral(" value=\"true\"");

WriteLiteral(" checked=\"checked\"");

WriteLiteral(" /> Allow partial chords\n\t\t    <input");

WriteLiteral(" type=\"checkbox\"");

WriteLiteral(" name=\"special\"");

WriteLiteral(" value=\"true\"");

WriteLiteral(" /> Allow special chords\n\t\t</form>\n\t\t<div");

WriteLiteral(" class=\"error\"");

WriteLiteral("></div>\n\t\t<div");

WriteLiteral(" id=\"findresult\"");

WriteLiteral("></div>\n\t\t<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(@">
		    function updateNamingConvention(value) {
		        location = 'hybrid:ShowChord?conv=' + value;
		    }
		</script>
		<!-- Main content end -->
			
    </div>
    <hr />
    <footer>
        <p>&copy; 2017 - Tomáš Němec</p>
    </footer>
</body>
</html>
");

}
}
}
#pragma warning restore 1591
